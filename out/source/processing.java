/* autogenerated by Processing revision 1293 on 2024-10-31 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import controlP5.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class processing extends PApplet {

// used controlP5 library: http://www.sojamo.de/libraries/controlP5

ControlP5 cp5;

// adjustable factors
int numPeople = 20;
int peopleSize = 30;
int Chaos = 30;

// how easy it is to find a cure (higher = easier)
float iqGain = 1.5f;
// adjustable factors end

int[] colours;
ArrayList<Person> residents;
boolean cure = false;

public void setup(){
  /* size commented out by preprocessor */;
  background(0);

  // initialize font (lags the setup for a split second)
  PFont font = createFont("Georgia", 80);
  textFont(font);

  // populate a colors array for better organization of colours
  colours = new int[3];
  colours[0] = color(225,10,10);
  colours[1] = color(32,252,3);
  colours[2] = color(10,10,225);

  // initialize the residents arraylist
  residents= new ArrayList<Person>();

  // ControlP5
  cp5 = new ControlP5(this);

  // buttons
  cp5.addButton("Add_Doctor")
     .setPosition(25, height/50)
     .setSize(200,height/25)
  ;

  cp5.addButton("Add_Resident")
     .setPosition(275, height/50)
     .setSize(200,height/25)
  ;
  cp5.addButton("Add_Sick")
     .setPosition(525, height/50)
     .setSize(200,height/25)
  ;

  // chaos slider
  cp5.addSlider("Chaos")
     .setPosition(775, height/50)
     .setSize(200,height/25)
     .setRange(1,60)
     .setValue(Chaos)
     .setSliderMode(Slider.FLEXIBLE)
  ;
  cp5.getController("Chaos")
    .getCaptionLabel().align(ControlP5.LEFT, ControlP5.BOTTOM_OUTSIDE)
  ;
  
  // populate residents arraylist
  for(int people=0; people<numPeople; people++){
    // picking a random status
    int randomStatus = PApplet.parseInt(random(0,2));

    try{
      if(randomStatus == 0){ //create sick resident
        createSickResident();
      }
      if(randomStatus == 1){ //create regular resident
        createNormalResident();
      }
      else{ //create healer/doctor
        createDoctorResident();
      }
    }
    catch(Exception e){
      println("Exception in creating people");
    }
  }
}

public void draw(){
  background(0);

  // draw and update each resident
  for(Person resident: residents){
    resident.drawMe();
    resident.updatePos();
  }

  // IF a cure is found, then SICK people have no effect anymore
  if(cure){
    fill(10, 10, 225);
    textAlign(CENTER, CENTER);
    text("Cure Found!", width/2, height/2);
  }
}

// functions that create the different statuses of residents
public void createSickResident(){
  residents.add(new Person(random(peopleSize,width-peopleSize), random(peopleSize,height-peopleSize), random(-2,-1), random(-2,-1), colours[0], 0, peopleSize, iqGain));
}

public void createNormalResident(){
  residents.add(new Person(random(peopleSize,width-peopleSize), random(peopleSize,height-peopleSize), random(1,2), random(1,2), colours[1], 1, peopleSize, iqGain));
}

public void createDoctorResident(){
  residents.add(new Person(random(peopleSize,width-peopleSize), random(peopleSize,height-peopleSize), random(1,2), random(1,2), colours[2], 2, peopleSize, iqGain));
} 

// event from addDoctorResident button
public void Add_Doctor() {
  createDoctorResident();
}
// event from addResident button
public void Add_Resident() {
  createNormalResident();
}
//event from addSickResident button
public void Add_Sick() {
  createSickResident();
}

// event handler from the Chaos slider
public void controlEvent(ControlEvent theEvent) {
  if (theEvent.isFrom("Chaos")) {  // Only trigger if Chaos changes
    int doctorSpeed = (int) theEvent.getValue();  // Update the global variable
    setDoctorSpeed(doctorSpeed);                      // Apply wage effect
  }
}

// increasing/decreasing the chaos turns the whole scene more/less chaotic
public void setDoctorSpeed(float wage){
  for(Person resident: residents){
    if(resident.status == 2){
      // increasing/decreasing the velocity
      if(resident.pos.x > width*4/5 || resident.pos.y > height*4/5){
        resident.vel = new PVector(-wage/15,-wage/15);
      }else{
        resident.vel = new PVector(wage/15,wage/15);
      }
    }
  }
}

class Person{
    PVector pos;
    PVector vel;
    int colour;
    int status;
    int diameter;
    int iq;
    float iqGain;

    Person(float posX, float posY, float velX, float velY, int c, int s, int d, float iq){
        this.pos = new PVector(posX,posY);
        this.vel = new PVector(velX, velY);
        this.colour = c;
        // 0 = sick | 1 = normal | 2 = doctor
        this.status = s;
        this.diameter = d;
        this.iq = 50;
        this.iqGain=iq;
    }

    // draws the resident
    public void drawMe(){
        fill(this.colour);
        circle(this.pos.x, this.pos.y, this.diameter);
    }
    
    public void updatePos(){
        this.pos.add(this.vel);
        
        // constain the position so it doesn't go "out of bounds"
        this.pos.x = constrain(this.pos.x,0,width-this.diameter/2);
        this.pos.y = constrain(this.pos.y,0,height-this.diameter/2);

        // change the direction of the velocity if the position is close to bounds
        if(this.pos.x<this.diameter/2 || this.pos.x>width-this.diameter/2){
            this.vel.x*=-1;
        }
        if(this.pos.y<this.diameter/2 || this.pos.y>height-this.diameter/2){
            this.vel.y*=-1;
        }

        // check for collision
        this.checkCollision();

        // check for cure
        this.findCure();
        
        // adds a random value from -1 to the iqGain (adjustable)
        this.iq += random(-1,this.iqGain);
    }

    public void checkCollision(){
        // for each other resident
        for(Person resident: residents){
            // find the distance between this and them
            PVector S = new PVector(this.pos.x - resident.pos.x, this.pos.y - resident.pos.y);
            
            // continue if the resident is itself
            if(S.mag()==0){
                continue;
            }

            // if the magnitude/distance is smaller than the diameter. apply correct collision logic
            if( S.mag() <= this.diameter){
                PVector sHat = S.normalize(null);

                // to avoid the problem of people getting stuck together
                this.pos = PVector.add(resident.pos, PVector.mult(sHat, this.diameter));
                
                // calculate the collision using Vector physics learned in class
                float k = this.vel.dot(sHat) - resident.vel.dot(sHat);
                PVector deltaThis = PVector.mult(sHat,k);
                PVector deltaResident = PVector.mult(sHat,k);
                this.vel.sub(deltaThis);
                resident.vel.add(deltaResident);
                
                // if this is a doctor, heal the sick person
                if(this.status == 2 && resident.status == 0){
                     resident.status = 1;
                     resident.colour = colours[1];
                }

                // if this is sick, doctor heals
                if(this.status == 0 && resident.status == 2){
                     this.status = 1;
                     this.colour = colours[1];
                }
                
                // sickness only spreads if there is no cure
                if(cure == false){
                    // if this is normal, the sick person spreads the disease
                    if(this.status == 1 && resident.status == 0){
                        this.status = 0;
                        this.colour = colours[0];
                    }

                    // if this is sick, it spreads the disease PLACEHOLDER
                    if(this.status == 0 && resident.status == 1){
                        resident.status = 0;
                        resident.colour = colours[0];
                    }
                }
            }
        }
    }

    // if a doctor has an iq of >120 then a cure is found
    public void findCure(){
        if(this.status == 2 && this.iq > 120){
            cure = true;
        }
    }
}


  public void settings() { size(1000, 800); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "processing" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
