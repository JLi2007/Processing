/* autogenerated by Processing revision 1293 on 2024-10-23 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class processing extends PApplet {

float aMin, aMax, bMin, bMax;

// // more negative = moves right
// float w = -2;
// // more negative = moves up
// float h = -0.5;
// // small value = more zoom
// float f = 0.7;

// more negative = moves right
float w = -2;
// more negative = moves up
float h = -1.5f;
// small value = more zoom
float f = 3;

// // more negative = moves right
// float w = -0.87;
// // more negative = moves up
// float h = -0.27;
// // small value = more zoom
// float f = 0.05;

public void setup() {
  /* size commented out by preprocessor */;
	background(0);
	noLoop();
}

public void draw(){
  aMin= w;
  aMax = aMin + f;
  bMin = h;
  bMax = bMin + f;

// default mandelbrot set
  // aMin= -2;
  // aMax = 1;
  // bMin = -1.5;
  // bMax = 1.5;

  float aSlope = (aMax-aMin)/width;
  float bSlope = (bMin-bMax)/height;

  for(int x = 0; x<width; x++){
    float a = get_a(x, aMin, aSlope);

    for(int y = 0; y<height; y++){
      float b = get_b(y, bMax, bSlope);
      ComplexNum c = new ComplexNum(a,b);
      ComplexNum z = c;
      int row = 1;

      while(z.absoluteValue()<2 && row<200){
        z = z.multiply(z).add(c);
        row++;
      }

      if(row==200){
        if(y%4==0){
          float absRatio = y * z.absoluteValue() / c.absoluteValue();
          stroke(absRatio/1, absRatio/1, absRatio/10);
        }
        else if(y%3==0){
          float absRatio = y * z.absoluteValue() / c.absoluteValue();
          stroke(absRatio/1, absRatio/10, absRatio/10);
        }
        else{
          float absRatio = y * z.absoluteValue() / c.absoluteValue();
          stroke(absRatio/10, absRatio/1, absRatio/1);
        }

      }else{
        if(row%4 == 0){
          float shade = 20*(PApplet.parseFloat(row)/200)*255;
          stroke( shade/2, shade/2, shade/20 );
        }
        else if(row%3 == 0){
          float shade = 20*(PApplet.parseFloat(row)/200)*255;
          stroke( shade/2, shade/20, shade/2 );
        } 
        else{
          float shade = 20*(PApplet.parseFloat(row)/200)*255;
          stroke( shade/20, shade/2, shade/2 );
        }
      }
      point(x,y);
    }
  }
}

public float get_a(float x, float aMin, float aSlope) { 
    return(aSlope*x + aMin);
}

public float get_b(float y, float bMax, float bSlope) { 
    return(bSlope*y + bMax);
}
class ComplexNum{
    // FIELDS
    float realNumber;
    float imaginaryNumber;

    // CONSTRUCTOR
    ComplexNum(float realNum, float imaginaryNum){
        this.realNumber = realNum;
        this.imaginaryNumber = imaginaryNum;
    }

    // PRINTS CONDITIONALLY
    public void printMe(){
        if(this.realNumber == 0){
            println(this.imaginaryNumber + "i");
        } 
        else if (this.imaginaryNumber == 0){
            println(this.realNumber);
        }else{
            println(this.realNumber + " + " + this.imaginaryNumber + "i");
        }
    }

    // ADDS THE COMPLEX NUMBERS
    public ComplexNum add(ComplexNum complexNum){
        return((new ComplexNum(this.realNumber + complexNum.realNumber, this.imaginaryNumber + complexNum.imaginaryNumber)));
    }

    // ABSOLUTE VALUE
    public float absoluteValue(){
        return(sqrt((this.realNumber*this.realNumber)+(this.imaginaryNumber*this.imaginaryNumber)));
    }

    // MULTIPLY
    public ComplexNum multiply(ComplexNum complexNum){
        return(new ComplexNum((this.realNumber*complexNum.realNumber - this.imaginaryNumber*complexNum.imaginaryNumber),(this.realNumber*complexNum.
        imaginaryNumber + this.imaginaryNumber*complexNum.realNumber)));
    }

    // // ROUNDS TO ONE DECIMAL PLACE
    // float roundToOneDecimal(float value) {
    //     return round(value * 10) / 10.0;
    // }
}


  public void settings() { size(800, 800); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "processing" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
