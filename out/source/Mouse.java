/* autogenerated by Processing revision 1293 on 2024-12-13 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Mouse extends PApplet {

public void mouseMoved() {
  //if( !animateAllStages ) {
    
  //  deltaPhi = map(mouseY, 0, height, 0, 2*PI); //Moving the mouse up and down changes the branching angle
  //  branchDecayFactor = map(mouseX, 0, width, 0.5, 0.9);  //Moving the mouse left & right changes the shrinking factor
 
  //  redraw();  /* So that we only regenerate the tree when the user moves the mouse,
  //                and not when the user is just sitting there, saving lag due to needless computation & redrawing */
  //}
}
int maximumLevel = 18;
float deltaPhi = PI/1.618f;
float branchDecayFactor = 0.70f; // 1.0 --> no shrinking at all, 0.97 --> shrink by 3% each gen.
float startingLength = 250;
int currLevel;
boolean animateAllStages = true;
float animationSpeed = 6;

public void setup() {
    background(255);
    /* size commented out by preprocessor */;
    strokeWeight(3);
    
    if( !animateAllStages )
      noLoop();
      
    else
      frameRate(animationSpeed);
}


public void draw() {
  background(0);
 
  if( animateAllStages ) {

    if( currLevel < maximumLevel) {
      float xBase = width/2;
      float yBase = height-20;
      float rootAngle = PI/2;
    
      drawFibTree( currLevel, xBase, yBase, rootAngle, deltaPhi, startingLength, 0 );   
      currLevel++;
    }
    
    else {
      frameRate(0.5f);
      float xBase = width/2;
      float yBase = height-20;
      float rootAngle = PI/2;
    
      drawFibTree( currLevel, xBase, yBase, rootAngle, deltaPhi, startingLength, 0 );  
    }
  }
  
  else {
   // drawFibTree( maximumLevel, width/2, height/2, 0,      deltaPhi, startingLength, 0 ); 
    drawFibTree( maximumLevel, width/2, height, PI/2,   deltaPhi, startingLength, 0 );  
    //drawFibTree( maximumLevel, width/2, height/2, PI,     deltaPhi, startingLength, 0 ); 
    //drawFibTree( maximumLevel, width/2, height/2, 3*PI/2, deltaPhi, startingLength, 0 );  
  }
}


public void drawFibTree( int n, float x1, float y1, float phi, float deltaPhi, float L, int age) {

   //BASE CASE
   float x2 = x1 + L*cos(phi);
   float y2 = y1 - L*sin(phi);
   setColour( age );
   line(x1, y1, x2, y2);
   
   
   //RECURSIVE CASE
   if (n > 1) {  
     L *= branchDecayFactor;
     
     if( age == 0 ) //We've just drawn a baby branch, now spawn a single kid branch at same angle
       drawFibTree( n-1, x2, y2, phi, deltaPhi, L, 1 );
       
     else { //We've just drawn a kid or adult branch, now spawn a new baby + new adult
       drawFibTree( n-1, x2, y2, phi + deltaPhi, deltaPhi, L, 2 );
       drawFibTree( n-1, x2, y2, phi - deltaPhi, deltaPhi, L, 0 );
     }
   }
}


public void setColour(int age) {
  if( age == 0 )
    stroke(0,200,0);
    
  else if( age == 1 )
    stroke(0,0,200);
    
  else
    stroke(200,0,100);
}


  public void settings() { size(1200, 600); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Mouse" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
